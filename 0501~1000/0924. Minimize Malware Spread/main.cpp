/**
 * Source: https://rb.gy/3awph
 * Date: 2023/8/30
 * Skill:
 * Runtime: 150 ms, faster than 66.14% of C++ online submissions
 * Memory Usage: 64.99 MB, less than 51.97% of C++ online submissions
 * Time complexity: O(n)
 * Space complexity: O(n)
 * Constraints:
 *      2 <= n <= 300
 *
 */

#include <vector>
#include <iostream>
#include <algorithm>
#include <map>
#include <set>

using namespace std;

#define ll long long
// using ll = long long;

typedef pair<int, int> pairs;

class Solution {
public:
    int find_father(int x, vector<int>& father) {
        if (father[x] != x)
            father[x] = find_father(father[x], father);
        return father[x];
    }
    void union_set(int x, int y, vector<int>& father) {
        int x_father = find_father(x, father), y_father = find_father(y, father);
        if (x_father != y_father)
            father[x_father] = y_father;
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size(), res = 0, count = INT32_MAX;
        vector<int> father(n, 0);
        for (int i = 0; i < n; ++i) father[i] = i;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (graph[i][j] == 1)
                    union_set(i, j, father);
            }
        }
        map<int, int> group2count;
        for (int i = 0; i < n; ++i) {
            if (group2count.find(find_father(i, father)) != group2count.end())
                group2count[find_father(i, father)] += 1;
            else
                group2count[find_father(i, father)] = 1;
        }
        for (auto i : initial) {
            int cur_count = 0;
            set<int> added_group;
            for (auto j: initial) {
                if (j == i)
                    continue;
                if (added_group.find(find_father(j, father)) == added_group.end()) {
                    added_group.insert(find_father(j, father));
                    cur_count += group2count[find_father(j, father)];
                }
            }
            if (cur_count < count) {
                count = cur_count;
                res = i;
            } else if (cur_count == count)
                res = min(res, i);
        }
        return res;
    }
};

static const auto io_sync_off = []() {
    // turn off sync
    std::ios::sync_with_stdio(false);
    // untie in/out streams
    std::cin.tie(nullptr);
    return nullptr;
}();

int main() {
    Solution s;
    vector<vector<int>> graph{{1,0,0,0},{0,1,0,0},{0,0,1,1},{0,0,1,1}};
    vector<int> initial{3, 1};
    int res = s.minMalwareSpread(graph, initial);
    cout << res << endl;
}